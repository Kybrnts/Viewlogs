#!/bin/sh
#: Title        : Viewlogs
#: Date         : 2019-02-12
#: Authors      : Written by: "Kybernetes" <correodelkybernetes@gmail.com>
#: Version      : 1.4.0
#: Description  : Executable Dash shell script file.
#:              : Allows user to select and read a log file from a list of allo-
#:              : wed directories.
#: Installation : 01. Deploy script in /usr/local/bin/viewlogs
#:              : 02. chown -v root:root /usr/local/bin/viewlogs
#:              : 03. chmod -v 755 /usr/local/bin/viewlogs
#:              : 04. useradd -M -s /usr/local/bin/viewlogs \
#:              :                -c "Vew logs user" viewlogs
#:              : 05. setfacl -m u:viewlogs:x /var/log/         # Allow to cd
#:              :     setfacl -m u:viewlogs:x /var/
#:              : 06. For each $drctry in /var/log/* that we need to browse
#:              :     * setfacl -R -m u:viewlogs:rx "$drctry"   # Allow browse
#:              :     * setfacl -R -m d:u:viewlogs:rx "$drctry" # New files also
##
## -- Run time configuration ---------------------------------------------------
# Allowed extension colon separated list
_FTYPELST="log:txt"
# Allowed-to-read EOL separated directory list
_LGDIRLST="/var/log/tomcat/
/var/log/jboss-as/instance1
/var/log/jboss-as/instance2"
##
## -- Required for execution ---------------------------------------------------
_CMD_FILE=/usr/bin/file _CMD_LESS=/usr/bin/less _CMD_LS=/usr/bin/ls
_CMD_MKFIFO=/usr/bin/mkfifo _CMD_RM=/usr/bin/rm _CMD_SLEEP=/usr/bin/sleep
_CMD_STTY=/usr/bin/stty _CMD_TAIL=/usr/bin/tail _CMD_WHIPTAIL=/usr/bin/whiptail
# Check required executables availability before starting
[ -x "$_CMD_FILE" ] ||
    { printf "${0##*/}: %s not found\n" "$_CMD_FILE"; exit 1; }
[ -x "$_CMD_LESS" ] ||
    { printf "${0##*/}: %s not found\n" "$_CMD_LESS"; exit 1; }
[ -x "$_CMD_LS" ] ||
    { printf "${0##*/}: %s not found\n" "$_CMD_LS"; exit 1; }
[ -x "$_CMD_MKFIFO" ] ||
    { printf "${0##*/}: %s not found\n" "$_CMD_MKFIFO"; exit 1; }
[ -x "$_CMD_RM" ] ||
    { printf "${0##*/}: %s not found\n" "$_CMD_RM"; exit 1; }
[ -x "$_CMD_SLEEP" ] ||
    { printf "${0##*/}: %s not found\n" "$_CMD_SLEEP"; exit 1; }
[ -x "$_CMD_STTY" ] ||
    { printf "${0##*/}: %s not found\n" "$_CMD_STTY"; exit 1; }
[ -x "$_CMD_TAIL" ] ||
    { printf "${0##*/}: %s not found\n" "$_CMD_TAIL"; exit 1; }
[ -x "$_CMD_WHIPTAIL" ] ||
    { printf "${0##*/}: %s not found\n" "$_CMD_WHIPTAIL"; exit 1; }
# Create alias to force use specific path within functions, while keeping syntax
# short. It will expand on func. declaration NOT on invocation. But DON'T put it
# inside "if" or any other construct command list: it could render it useless!!
alias file="$_CMD_FILE" less="$_CMD_LESS" ls="$_CMD_LS" mkfifo="$_CMD_MKFIFO"\
      rm="$_CMD_RM" sleep="$_CMD_SLEEP" stty="$_CMD_STTY" tail="$_CMD_TAIL" \
      whiptail="$_CMD_WHIPTAIL"
##
## -- Globals ------------------------------------------------------------------
# Declare the following useful symbols:
_RPLY=              ## Read reply
IFS=                ## Clear the IFS in case they a messy one has been exported;
readonly _SPC=" "   ## Space (readonly uses a word for assignment's LHS);
readonly _TAB="	"   ## Tab;
readonly _EOL="
"                   ## En of line (newline);
IFS=$_SPC$_TAB$_EOL ## Now reset de IFS as expected
##
## -- Auxiliary functions ------------------------------------------------------
stdmsg() { #@ DESCRIPTION: Print messages to STDOUT
           #@ USAGE: stdmsg [ MSG ... ]
    [ "${1+X}" = X ] && printf "%s\n" "$@"
}
errmsg() { #@ DESCRIPTION: Print messages to STDERR prefixed by an error stamp
           #@ USAGE: stderr [ MSG ... ]
    stdmsg ${1+"Error! $@"} >&2
}
setvar() { #@ DESCRIPTION: Sets $1 variable specified by reference, to $2 value.
           #@ $1 MUST BE A VALID NAME!
           #@ USAGE: setvar NAME [ VALUE ]
           #@        /!\ - WARNING! - /!\ $1 must be a valid name
    eval "$1=\${2+\"\$2\"}" ## Without the right side backslash, escaped chars
                            ## won't be part of assignment
}
getvar() { #@ DESCRIPTION: Stores value of $2 referenced var in $1 name. If $2
           #@              referenced var. is unset, so $1 name will remain and
           #@              exit status will be 1.
           #@ USAGE: getvar NAMEW NAMER
           #@        /!\ - WARNING! - /!\ $1 AND $2 must be a valid names
    eval "[ \"\${$2+X}\" = X ] && $1=\"\${$2}\"" ## Do not set $1 referenced
                                                 ## name if $2 is also unset
}
_TMPFFID=0  ## Unique incremental temporary fifo ID
_mkTFfo() { #@ DESCRIPTION: Creates single temp fifo in /tmp for each invocation
            #@              during current instance of script updating unique
            #@              global ID and storing full path in $1 name. Fifo's
            #@              permission bits may be set to $2 value.
            #@ USAGE: _mkTFfo NAME [ MODE ]
            #@        /!\ - WARNINGS: - /!\
            #@        * $1 must be a valid name
            #@        * DO NOT CALL DIRECTLY, use mkTFfo() wrapper instead.
    # Local variables ("local" must be function's first statement)
    local n tffp
    # Initialize fifo's path and an attempts counter
    tffp=/tmp/${0##*/}.$$.$_TMPFFID.tmp n=0
    # While path used, change path and try create fifo again, limiting attempts.
    # Use mode if present, nullify mkfifo's output and limit execution time.
    while ! mkfifo ${2+-m "$2"} "$tffp" 1>/dev/null 2>&1; do
        if [ ! -e "$tffp" ]; then                ## failed but no fifo there?
            errmsg "Failed to create named pipe" ## * Display error msg
            return 1                             ## * Report to calling env.
        fi                                       ## Failed due to existing ffo?
        stmpwrn "Existing named pipe $tffp"      ## Displsy warning
        if [ $((n=n+1)) -gt 50 ]; then           ## Increase attempts counter
            errmsg "Too many named pipes."       ## Attempts above limit?
            stdmsg "Will NOT try again."         ## * Display error
            return 2                             ## * Report to calling env.
        fi                                       ## Attempts below limit, so
        stdmsg "Trying again.."                  ## try again.
        _TMPFFID=$((_TMPFFID < 999 ? _TMPFFID + 1 : 0)) ## Increase global ID
        tffp=/tmp/${0##*/}.$$.$_TMPFFID.tmp             ## Change path
    done                                            ## Fifo created!
    stdmsg "Done."                                  ## Display that
    _TMPFFID=$((_TMPFFID < 999 ? _TMPFFID + 1 : 0)) ## Increase ID (now used)
    setvar $1 "$tffp"                               ## Write path to output name
}
mkTFfo() { #@ DESCRIPTION: Creates single temp fifo in /tmp using _mkTFfo()
           #@ USAGE: mkTFfo NAME [ MODE ]
    # Local variables ("local" must be function's first statement)
    local _$1                          ## Create tmp storage for wrapped output
    _mkTFfo _$1 ${2+"$2"} || return    ## call wrapped or end preserving status
    getvar $1 _$1                      ## Set referenced name w/wrapped output
}
##
## -- Script specific functions ------------------------------------------------
_LGDIRS=         #@ Log dirs array size
_getLgDrsArr() { #@ DESCRIPTION: Creates an array-like list of vars w/$_LGDIRLST
                 #@              string, storing its size in above global, and
                 #@              each line in an array element. $1 is used as
                 #@              the array base name.
                 #@ USAGE: _setLgDrsArr ARRAYBASENAME
                 #@        DO NOT CALL DIRECTLY, use below wrapper instead.
    # Local variables ("local" must be function's first statement)
    local lgdirlst
    # Initialize local logs dir list and global array size
    lgdirlst="$_LGDIRLST" _LGDIRS=0
    # While directory string list is not null..
    while [ X"$lgdirlst" != X ]; do
        # If line/path from string is an existing directory..
        if [ -d "${lgdirlst%%[$_EOL]*}" ]; then
            # Create array entry w/global size as key and path as value
            setvar $1_$_LGDIRS "${lgdirlst%%[$_EOL]*}"
            # Increase global size
            _LGDIRS=$((_LGDIRS + 1))
        fi
        # Remove last processed line from global directory list
        case $lgdirlst in
            # If list contains an EOL, remove all up to EOL from front
            *$_EOL*) lgdirlst=${lgdirlst#*$_EOL} ;;
            # If list doesn't contain EOL assume end of list reached
            *) lgdirlst= ;;
        esac
    done
}
getLgDrsArr() { #@ DESCRIPTION: Creates an array-like list of vars w/$_LGDIRLST
                #@              string using _getLgDrsArr(). Array size is sto-
                #@              red in $1 and $2 is used as the array base name.
                #@ USAGE: getLgDrsArr NAME ARRAYBASENAME
    _getLgDrsArr ${2+"$2"} ## Create the array using $2 name (if present)
    setvar $1 $_LGDIRS     ## Assign global array size to referenced name
}
_RGFLS=          #@ Regular files array size
_getRgFlsArr() { #@ DESCRIPTION: Creates an array-like list of vars w/available
                 #@              reg. files right under $3 dir sorted by mtime,
                 #@              storing each file in an element while size is
                 #@              stored in global. $1 is used as array's bsnme.
                 #@ USAGE: _getRgFlsArr ARRAYNAME PATH
                 #@        DO NOT CALL DIRECTLY, use below wrapper instead.
    # Local variables ("local" must be function's first statement)
    local fls tffo ftypelst
    # Initialize local type and file pattern lists, and global size
    ftypelst="$_FTYPELST" fls= _RGFLS=0
    # Create list of path patterns from global
    # While local file type list is not null..
    while [ X"$ftypelst" != X ]; do
        # For each $type append "$path/*.$type" to files pattern list
        fls=${fls+"$fls "}"\"\$2\"/*."${ftypelst%%:*}
        # Remove last processed type from types list
        case $ftypelst in
            # If list contains a ':', remove all up to ':' from front
            *:*) ftypelst=${ftypelst#*:} ;;
            # If it doesn't assume end of list reached
            *) ftypelst= ;;
        esac
    done
    # Create the temporary fifo
    if ! mkTFfo tffo; then                         ## Try to create a temp. fifo
        errmsg "Unable to create a temporary pipe" ## Or fail accordingly
        return 1
    fi
    # Expand list of path patterns before sorting by mtime w/ls, discarding any
    # ls error messages. We won't care if ls fails due limited access, or non-
    # existing regular files, just allow to list what it's able to
    eval "ls -td1 -- $fls" >$tffo 2>/dev/null & ## Sort by mtime and send t/pipe
    # Read from pipe line by line each path
    { while IFS= read -r _RPLY; do
          if [ -f "$_RPLY" ]; then
              # Create array elmnt w/current file basename
              setvar $1_$_RGFLS "${_RPLY##*/}" 
              # Increase global size
              _RGFLS=$((_RGFLS + 1))
          fi
      # Loop prints error message to STDERR when failed to read from pipe
      done <$tffo; } 2>/dev/null
    # $?=1 when EOF is reached, $?>1 when unable to open fifo
    if [ $? -gt 1 ]; then
        # Print error message to STDERR when failed to read from pipe
        errmsg "Failed to read from named pipe"
        rm -f $tffo ## Clean up before finishing
        return 2    ## And finish w/errors
    fi
    wait $!         ## Wait until backgrounded finishes
    rm -f $tffo     ## Clean up before finishing
}
getRgFlsArr() { #@ DESCRIPTION: Creates an array-like list of vars w/reg. files
                #@              right under $3 dir, using $2 as array's bsenme,
                #@              storing each path in an array elmnt. Array size
                #@              is stored in $1 referenced name, making it the
                #@              wrapper to call when _getRgFlsArr() is needed.
                #@ USAGE: getRgFlsArr SIZE ARRAYNAME PATH
    # call _getRgFlsArr() or finish preserving its exit status
    _getRgFlsArr ${2+"$2"} ${3+"$3"} || return
    # Store global reg. files array size into $1 referenced name
    setvar $1 $_RGFLS
}
unstArr() { #@ DESCRIPTION: Unset an entire array-like list of variables given
            #@              its basename and size
            #@ USAGE unsetArr SIZE ARRAYBASENAME
    # Local variables ("local" must be function's first statement)
    local i
    i=0                     ## Initialize array index
    while [ $i -le $1 ]; do ## While previous index wasn't the last one
        eval "unset $2_$i"  ## Unset current array element
        i=$((i + 1))        ## Increase index
    done
}
_TROWS=        #@ Current terminal's dimensions: rows
_TCOLS=        #@ and columns
_getTrmSze() { #@ DESCRIPTION: Gets current terminal size in rows and columns,
               #@              storing its values in above globals.
               #@ USAGE: _getTrmSze
               #@        DO NOT CALL DIRECTLY, use getTrmSze() wrapper instead.
    # Local variables ("local" must be function's first statement)
    local tffo
    if ! mkTFfo tffo; then                         ## Try to create a temp. fifo
        errmsg "Unable to create a temporary pipe" ## Or fail accordingly
        return 1
    fi
    # Get all current [pseudo]tty information to pipe
    stty -a >$tffo 2>/dev/null &
    # Read information line by line
    { while IFS= read -r _RPLY; do
          case $_RPLY in                      ## Filter per line
              *rows*columns*)                 ## If curr. line has rows and cols
                  _TROWS=${_RPLY#*"rows "}    ## * Extract rows number to global
                  _TROWS=${_TROWS%%[!0-9]*}   ##
                  _TCOLS=${_RPLY#*"columns "} ## * Extract cols number to global
                  _TCOLS=${_TCOLS%%[!0-9]*}   ##
                  break ;;                    ## * Stop reading, we got it all
          esac
      # IO redir for loop to read from pipe and silence shell errors
      done <$tffo; } 2>/dev/null
    # $?=1 when EOF is reached, $?>1 when unable to open fifo
    if [ $? -gt 1 ]; then
        # Print error message to STDERR when failed to read from pipe
        errmsg "Failed to read from named pipe"
        rm -f $tffo ## Clean up
        return 2    ## And finish w/errors
    # Check exit status from previously backgrounded (job control)
    elif ! wait $!; then
        # Print error message if backgrounded finished w/errors
        errmsg "Failed to get terminal size"
        rm -f $tffo ## Clean up
        return 3    ## And finish w/errors. We can't trust what we got from pipe
    fi
    rm -f $tffo     ## Clean finish
}
getTrmSze() { #@ DESCRIPTION: Gets curr. term. size in rows and columns using
              #@              _getTrmSze(), storing them in $1 and $2 names resp
              #@ USAGE: getTrmSze NAME1 NAME2
    _getTrmSze || return  ## Call _getTrmSze or finish preserving exit status
    setvar $1 "$_TROWS"   ## Set referenced names w/global values
    setvar $2 "$_TCOLS"
}
_MSLCTD=  #@ Option menu selected option value
_menu() { #@ DESCRIPTION: Displays a whiptail option menu using an array-like
          #@              list of vars. Each array element becomes a menu option
          #@              and each index the corresponding option value. $1 is
          #@              used as the menu title, $2 as a suggestion text, $3 as
          #@              the arr bsnme $4 as the array length. After usr choos-
          #@              es an option, its value is written to above's global.
          #@ USAGE: _menu TITLE SUG ABSNME SIZE [ OK_TXT [ CANCEL_TXT ] ]
          #@        DO NOT CALL DIRECTLY, use menu() wrapper instead.    
    # Local variables ("local" must be function's first statement)
    local rws cls i tgitms itm
    rws=0 cls=0                              ## Initialize rows and cols values
    if ! getTrmSze rws cls; then             ## Get current term rows and cols
        errmsg "Unable to get terminal size" ## Or finish w/errors
        return 1
    fi
    i=0 tgitms=             ## Init. index and the taged list of items string
    while [ $i -lt $4 ]; do ## Turn index into a menu tag followed by matchig 
        getvar itm $3_$i    ## element's double-quoted value & accumulating them
        tgitms=${tgitms:+"$tgitms "}"$i \"$itm\""
        i=$((i + 1))
    done                    ## Display the menu, and await for user's selection
    _MSLCTD=$(eval "whiptail --fb --notags --title \"$1\" --menu \"$2\"\
                             --ok-button \"${5:-OK}\"\
                             --cancel-button \"${6:-Cancel}\" --\
                             $((rws < 3 ? rws : rws - 3))\
                             $((cls < 30 ? cls : cls - 30))\
                             $((rws < 15 ? rws : rws - 15))\
                             $tgitms x \"${6:-Cancel}\" 3>&1 >&2 2>&3")
    case $? in             ## If an option is selected, then whiptail's esit
        0) return 0 ;;     ## status is 0. Else if cancel button is selected
        1) return 1 ;;     ## It will return 1. In any other case, assume that
        *)                 ## something wen wrong w/whiptails's execution.
            errmsg "Menu failed"
            return 2 ;;
    esac
}
menu() { #@ DESCRIPTION: This is the wrapper for _menu(), that you usually want
         #@              to use. In addition to wrapped's functionality, it sto-
         #@              res the selected item's value in referenced name.
         #@ USAGE: menu NAME TITLE SUG ANAME ASIZE [ OK_TXT [ CANCEL_TXT ] ]
    _menu ${2+"$2"} ${3+"$3"} ${4+"$4"} ${5+"$5"} ${6+"$6"} ${7+"$7"} || return
    setvar $1 "$_MSLCTD"
}
_RSLCTD=
_radio() { #@ DESCRIPTION: Displays a whiptail radio list allowing user to se-
           #@              lect between actions to take upon $1 filename.
           #@ USAGE: _radio PATH
           #@        DO NOT CALL DIRECTLY, use radio() wrapper instead.
    # Local variables ("local" must be function's first statement)
    local rws cls
    rws=0 cls=0                              ## Initialize rows and cols.
    if ! getTrmSze rws cls; then             ## Get curr. term. cols and rows
        errmsg "Unable to get terminal size" ## Or finish w/errors
        return 1
    fi
    # Display the radio list awaiting for user to choose
    _RSLCTD=$(whiptail --fb --notags --title "Action select"\
                       --radiolist "Select action for $1:"\
                       --ok-button OK --cancel-button Back --\
                       $((rws < 20 ? rws : 20)) $((cls < 60 ? cls : 60))\
                       $((rws < 4 ? rws : 4))\
                       1 "View   - less secure " on\
                       2 "Follow - tail -F (rotation aware) " off\
                       3 "Cancel - Go back " off 3>&1 >&2 2>&3)
    case $? in             ## If an option is selected, then whiptail's esit
        0) return 0 ;;     ## status is 0. Else if cancel button is selected
        1) return 1 ;;     ## It will return 1. In any other case, assume that
        *)                 ## something wen wrong w/whiptails's execution.
            errmsg "Radio failed"
            return 2 ;;
    esac
}
radio() { #@ DESCRIPTION: Wrapper for _radio() for general use. In addition it
          #@              stores the selected item value in $1 referenced name.
          #@ USAGE: radio NAME PATH
    _radio ${2+"$2"} || return
    setvar $1 "$_RSLCTD"
}
istxtf() { #@ DESCRIPTION: Tests if $1 path is that of a plain/text file using
           #@              "file" command. If it is, exit status will be 0, else
           #@               it will be 1. Greater stat indicates "file" failed.
           #@ USAGE: istxtf PATH
    # Local variables ("local" must be function's first statement)
    local fout
    fout=$(file -i "$1") || return 1 ## Get mime type string or fail
    case $fout in                    ## Test retreived mime type string
        *inode/x-empty*)             ## If this is an empty file fail w/specific
            errmsg "$1 is empty."    ## exit status
            return 2 ;;              ##
        *text/plain*) return 0 ;;    ## Else if this is a text file succeed..
        *)                           ## Fail in any other case w/generic status
            errmsg "$1 is not a plain text file."
            return 3 ;;
    esac
}
viewlog() { #@ DESCRIPTION: Allows user to safely browse $1 text file content.
            #@ USAGE: viewlog PATH
    LESSSECURE=1 less "$1" ## Try to issue less in secure mode
}
fllwlog() { #@ DESCRIPTION: Allows user to follow (monitor) on $1 updates. It is
            #@              also aware of file rotations. This makes it useful
            #@              when following for long periods.
            #@ USAGE: fllwlog PATH
    tail -F "$1"               ## Use -F flag to report file rotations to STDOUT
    [ $? -eq 130 ] && return 0 ## Tail seems to exit w/130 when Ctrl+C is issued
                               ## by user (SIGTERM), hence normal exit
    return 1                   ## Assume failure in any other case
}
##
## -- Main ---------------------------------------------------------------------
main() {
    # Local variables ("local" must be function's first statement)
    local ldarr lds s_ld s_ldp lfarr lfs s_lf s_lfp s_rd
    set -m                                             ## Force job control ON
    # Check for an interactive shell
    if [ ! -t 0 ]; then                     ## Curr. STDIN NOT point to term?
        errmsg "Interactive shell required" ## Finish w/errors
        sleep 3
        return 1
    fi
    # Fetch log-directories-to-select array
    # Try to get array size in lds using ldarr as array base name
    if ! getLgDrsArr lds ldarr; then                   ## Fail to do so?
        stdmsg "Unable to retrieve log directory list" ## Display error message
        sleep 3                                        ## Allow some time
        return 2                                       ## Finish w/errors
    fi
    # Script's main loop, keep prompting user to select a directory
    while :; do
        # Request user to select a directory from log directories array
        menu s_ld "Directory selection" "Select a log directory:" \
             ldarr $lds OK Exit ## Display menu using array elements as options
        case $? in              ## Storing selected value in s_ld
            1) return 0 ;;      ## Finish execution on "Cancel"
            2)                  ## Also Finish exec. w/errors when menu fails
                stdmsg "Unable to get answer from user"
                sleep 3
                return 3 ;;
        esac
        # Take actions according to user selected directory
        case $s_ld in
                # If user selected "X" option, finish execution
            [Xx]) return 0 ;;                                    
            *)  # Else..
                # Get selected array index value path in s_ldp
                getvar s_ldp ldarr_$s_ld
                # Try Fetch array of files in selected dir path
                if ! getRgFlsArr lfs lfarr "$s_ldp"; then
                    # If fail to do so, display error and finish exec.
                    stdmsg "Unable to retrieve $s_ldp file list"
                    sleep 3
                    return 4
                # Check if there are any files available
                elif [ $lfs -eq 0 ]; then
                    # If there aren't, let the user know in a message
                    stdmsg "No files available under $s_ldp"
                    sleep 3  ## Allow user to read message
                    continue ## Go back to directory selection menu
                fi
                # Keep prompting user to select log file from selected directory
                while :; do
                    # Request user to select a log file to read
                    # Display menu using log files array as options storing se-
                    # lected value in s_lf
                    menu s_lf "Logfile selection" "Select a log file:" \
                              lfarr $lfs OK Back
                    case $? in
                        1)  # Finish current loop on "Cancel" but make sure to
                            # destroy log files array before next iteration.
                            unstArr $lfs lfarr 
                            break ;;
                        2)  # Finish execution w/errors when menu fails
                            stdmsg "Unable to get answer from user"
                            sleep 3
                            return 5 ;;
                    esac
                    # Take actions according to user selected log file
                    case $s_lf in
                           # If user selected "X" option, finish current loop
                           # making sure to destroy current log files array
                        [Xx])                        
                            unstArr $lfs lfarr
                            break ;;
                        *) # Else..
                           # Get selected array index value name in s_lfp
                            getvar s_lfp lfarr_$s_lf
                            # Pre-append container's path and test if text file
                            if ! istxtf "$s_ldp/$s_lfp"; then
                                stdmsg "Could not select specified file"
                                sleep 3             ## Allow usr to read
                            else                    ## If this is a text file..
                                # Allow user choose what to do w/radio item list
                                # Storing selected item value in s_rd
                                radio s_rd "$s_lfp"
                                case $? in
                                    # Go to previous menu on "Back"
                                    1) continue ;;
                                    # Finish execution on any other exit status
                                    2)
                                        stdmsg "Unable to get answer from user"
                                        sleep 3
                                        return 6 ;;
                                esac
                                # Take action according to user selected action
                                case $s_rd in
                                    1)  # If user slctd 1 (view w/less secure)
                                        # Use viewlog to page files's content
                                        if ! viewlog "$s_ldp/$s_lfp"; then
                                            # Above operation fails? disply err.
                                            stdmsg "Unable to view $s_lfp"
                                            sleep 3 ## Allow user to read error
                                        fi ;;       ## Back to file selec. menu
                                    2)
                                        # If user selected 2 (Follow file)
                                        # Try to use fllwlog to follow updates
                                        if ! fllwlog "$s_ldp/$s_lfp"; then
                                            # Or fail ging back to fle selection
                                            stdmsg "Unable to follow $s_lfp"
                                            sleep 3
                                        fi ;; ## Go back to file selection menu
                                esac          ## in any other case
                            fi ;;
                    esac
                done ;;
        esac
    done
}
## Aliases no longer needed
unalias file less ls mkfifo rm sleep stty tail whiptail
##
## -- Run! ---------------------------------------------------------------------
main
